{
  "image": "hyperledger/fabric-peer:2.1",
  "total_vulnerabilities": 163,
  "scanners_used": [
    "trivy",
    "grype"
  ],
  "vulnerabilities": [
    {
      "cve_id": "CVE-2021-36159",
      "package_name": "apk-tools",
      "installed_version": "2.10.5-r0",
      "fixed_version": "2.10.7-r0",
      "severity": "CRITICAL",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "libfetch: an out of boundary read while libfetch uses strtol to parse the relevant numbers into address bytes leads to information leak or crash",
      "description": "libfetch before 2021-07-26, as used in apk-tools, xbps, and other products, mishandles numeric strings for the FTP and HTTP protocols. The FTP passive mode implementation allows an out-of-bounds read because strtol is used to parse the relevant numbers into address bytes. It does not check if the line ends prematurely. If it does, the for-loop condition checks for the '\\0' terminator one byte too late.",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-30139",
      "package_name": "apk-tools",
      "installed_version": "2.10.5-r0",
      "fixed_version": "2.10.6-r0",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "",
      "description": "In Alpine Linux apk-tools before 2.12.5, the tarball parser allows a buffer overflow and crash.",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-28831",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r10",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: invalid free or segmentation fault via malformed gzip data",
      "description": "decompress_gunzip.c in BusyBox through 1.32.1 mishandles the error bit on the huft_build result pointer, with a resultant invalid free or segmentation fault, via malformed gzip data.",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42378",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42379",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42380",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42381",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42382",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42383",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42384",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42385",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42386",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-3711",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1l-r0",
      "severity": "CRITICAL",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "openssl: SM2 Decryption Buffer Overflow",
      "description": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-23840",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1j-r0",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "openssl: integer overflow in CipherUpdate",
      "description": "Calls to EVP_CipherUpdate, EVP_EncryptUpdate and EVP_DecryptUpdate may overflow the output length argument in some cases where the input length is close to the maximum permissable length for an integer on the platform. In such cases the return value from the function call will be 1 (indicating success), but the output length value will be negative. This could cause applications to behave incorrectly or crash. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x).",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-3450",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1k-r0",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "openssl: CA certificate check bypass with X509_V_FLAG_X509_STRICT",
      "description": "The X509_V_FLAG_X509_STRICT flag enables additional security checks of the certificates present in a certificate chain. It is not set by default. Starting from OpenSSL version 1.1.1h a check to disallow certificates in the chain that have explicitly encoded elliptic curve parameters was added as an additional strict check. An error in the implementation of this check meant that the result of a previous check to confirm that certificates in the chain are valid CA certificates was overwritten. This effectively bypasses the check that non-CA certificates must not be able to issue other certificates. If a \"purpose\" has been configured then there is a subsequent opportunity for checks that the certificate is a valid CA. All of the named \"purpose\" values implemented in libcrypto perform this check. Therefore, where a purpose is set the certificate chain will still be rejected even when the strict flag has been used. A purpose is set by default in libssl client and server certificate verification routines, but it can be overridden or removed by an application. In order to be affected, an application must explicitly set the X509_V_FLAG_X509_STRICT verification flag and either not set a purpose for the certificate verification or, in the case of TLS client or server applications, override the default purpose. OpenSSL versions 1.1.1h and newer are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1h-1.1.1j).",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-3712",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1l-r0",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "openssl: Read buffer overruns processing ASN.1 strings",
      "description": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory contents (such as private keys, or sensitive plaintext). Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k). Fixed in OpenSSL 1.0.2za (Affected 1.0.2-1.0.2y).",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-3711",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1l-r0",
      "severity": "CRITICAL",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "openssl: SM2 Decryption Buffer Overflow",
      "description": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-23840",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1j-r0",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "openssl: integer overflow in CipherUpdate",
      "description": "Calls to EVP_CipherUpdate, EVP_EncryptUpdate and EVP_DecryptUpdate may overflow the output length argument in some cases where the input length is close to the maximum permissable length for an integer on the platform. In such cases the return value from the function call will be 1 (indicating success), but the output length value will be negative. This could cause applications to behave incorrectly or crash. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x).",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-3450",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1k-r0",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "openssl: CA certificate check bypass with X509_V_FLAG_X509_STRICT",
      "description": "The X509_V_FLAG_X509_STRICT flag enables additional security checks of the certificates present in a certificate chain. It is not set by default. Starting from OpenSSL version 1.1.1h a check to disallow certificates in the chain that have explicitly encoded elliptic curve parameters was added as an additional strict check. An error in the implementation of this check meant that the result of a previous check to confirm that certificates in the chain are valid CA certificates was overwritten. This effectively bypasses the check that non-CA certificates must not be able to issue other certificates. If a \"purpose\" has been configured then there is a subsequent opportunity for checks that the certificate is a valid CA. All of the named \"purpose\" values implemented in libcrypto perform this check. Therefore, where a purpose is set the certificate chain will still be rejected even when the strict flag has been used. A purpose is set by default in libssl client and server certificate verification routines, but it can be overridden or removed by an application. In order to be affected, an application must explicitly set the X509_V_FLAG_X509_STRICT verification flag and either not set a purpose for the certificate verification or, in the case of TLS client or server applications, override the default purpose. OpenSSL versions 1.1.1h and newer are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1h-1.1.1j).",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-3712",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1l-r0",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "openssl: Read buffer overruns processing ASN.1 strings",
      "description": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory contents (such as private keys, or sensitive plaintext). Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k). Fixed in OpenSSL 1.0.2za (Affected 1.0.2-1.0.2y).",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-28831",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r10",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: invalid free or segmentation fault via malformed gzip data",
      "description": "decompress_gunzip.c in BusyBox through 1.32.1 mishandles the error bit on the huft_build result pointer, with a resultant invalid free or segmentation fault, via malformed gzip data.",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42378",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42379",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42380",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42381",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42382",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42383",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42384",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42385",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42386",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "busybox: use-after-free in awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc()",
      "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-37434",
      "package_name": "zlib",
      "installed_version": "1.2.11-r3",
      "fixed_version": "1.2.11-r4",
      "severity": "CRITICAL",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "zlib: heap-based buffer over-read and overflow in inflate() in inflate.c via a large gzip header extra field",
      "description": "zlib through 1.2.12 has a heap-based buffer over-read or buffer overflow in inflate in inflate.c via a large gzip header extra field. NOTE: only applications that call inflateGetHeader are affected. Some common applications bundle the affected zlib source code but may be unable to call inflateGetHeader (e.g., see the nodejs/node reference).",
      "detected_by": [
        "trivy",
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-23806",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.16.14, 1.17.7",
      "severity": "CRITICAL",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: crypto/elliptic: IsOnCurve returns true for invalid field elements",
      "description": "Curve.IsOnCurve in crypto/elliptic in Go before 1.16.14 and 1.17.x before 1.17.7 can incorrectly return true in situations with a big.Int value that is not a valid field element.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2023-24538",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.19.8, 1.20.3",
      "severity": "CRITICAL",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: html/template: backticks not treated as string delimiters",
      "description": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2023-24540",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.19.9, 1.20.4",
      "severity": "CRITICAL",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: html/template: improper handling of JavaScript whitespace",
      "description": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2024-24790",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.21.11, 1.22.4",
      "severity": "CRITICAL",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: net/netip: Unexpected behavior from Is methods for IPv4-mapped IPv6 addresses",
      "description": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2020-16845",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.13.15, 1.14.7",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: ReadUvarint and ReadVarint can read an unlimited number of bytes from invalid inputs",
      "description": "Go before 1.13.15 and 14.x before 1.14.7 can have an infinite read loop in ReadUvarint and ReadVarint in encoding/binary via invalid inputs.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2020-28362",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.14.12, 1.15.5",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: math/big: panic during recursive division of very large numbers",
      "description": "Go before 1.14.12 and 1.15.x before 1.15.4 allows Denial of Service.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2021-27918",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.15.9, 1.16.1",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: encoding/xml: infinite loop when using xml.NewTokenDecoder with a custom TokenReader",
      "description": "encoding/xml in Go before 1.15.9 and 1.16.x before 1.16.1 has an infinite loop if a custom TokenReader (for xml.NewTokenDecoder) returns EOF in the middle of an element. This can occur in the Decode, DecodeElement, or Skip method.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2021-33195",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.15.13, 1.16.5",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: net: lookup functions may return invalid host names",
      "description": "Go before 1.15.13 and 1.16.x before 1.16.5 has functions for DNS lookups that do not validate replies from DNS servers, and thus a return value may contain an unsafe injection (e.g., XSS) that does not conform to the RFC1035 format.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2021-33196",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.15.13, 1.16.5",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: archive/zip: malformed archive may cause panic or memory exhaustion",
      "description": "In archive/zip in Go before 1.15.13 and 1.16.x before 1.16.5, a crafted file count (in an archive's header) can cause a NewReader or OpenReader panic.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2021-33198",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.15.13, 1.16.5",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: math/big.Rat: may cause a panic or an unrecoverable fatal error if passed inputs with very large exponents",
      "description": "In Go before 1.15.13 and 1.16.x before 1.16.5, there can be a panic for a large exponent to the math/big.Rat SetString or UnmarshalText method.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2021-39293",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.16.8, 1.17.1",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: archive/zip: malformed archive may cause panic or memory exhaustion (incomplete fix of CVE-2021-33196)",
      "description": "In archive/zip in Go before 1.16.8 and 1.17.x before 1.17.1, a crafted archive header (falsely designating that many files are present) can cause a NewReader or OpenReader panic. NOTE: this issue exists because of an incomplete fix for CVE-2021-33196.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2021-41771",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.16.10, 1.17.3",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: debug/macho: invalid dynamic symbol table command can cause panic",
      "description": "ImportedSymbols in debug/macho (for Open or OpenFat) in Go before 1.16.10 and 1.17.x before 1.17.3 Accesses a Memory Location After the End of a Buffer, aka an out-of-bounds slice situation.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2021-41772",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.16.10, 1.17.3",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: archive/zip: Reader.Open panics on empty string",
      "description": "Go before 1.16.10 and 1.17.x before 1.17.3 allows an archive/zip Reader.Open panic via a crafted ZIP archive containing an invalid name or an empty filename field.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2021-44716",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.16.12, 1.17.5",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: net/http: limit growth of header canonicalization cache",
      "description": "net/http in Go before 1.16.12 and 1.17.x before 1.17.5 allows uncontrolled memory consumption in the header canonicalization cache via HTTP/2 requests.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-23772",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.16.14, 1.17.7",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: math/big: uncontrolled memory consumption due to an unhandled overflow via Rat.SetString",
      "description": "Rat.SetString in math/big in Go before 1.16.14 and 1.17.x before 1.17.7 has an overflow that can lead to Uncontrolled Memory Consumption.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-24675",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.17.9, 1.18.1",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: encoding/pem: fix stack overflow in Decode",
      "description": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-24921",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.16.15, 1.17.8",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: regexp: stack exhaustion via a deeply nested expression",
      "description": "regexp.Compile in Go before 1.16.15 and 1.17.x before 1.17.8 allows stack exhaustion via a deeply nested expression.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-27664",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.18.6, 1.19.1",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: net/http: handle server errors after sending GOAWAY",
      "description": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-28131",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.17.12, 1.18.4",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: encoding/xml: stack exhaustion in Decoder.Skip",
      "description": "Uncontrolled recursion in Decoder.Skip in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a deeply nested XML document.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-28327",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.17.9, 1.18.1",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: crypto/elliptic: panic caused by oversized scalar",
      "description": "The generic P-256 feature in crypto/elliptic in Go before 1.17.9 and 1.18.x before 1.18.1 allows a panic via long scalar input.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-2879",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.18.7, 1.19.2",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: archive/tar: github.com/vbatts/tar-split: unbounded memory consumption when reading headers",
      "description": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-2880",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.18.7, 1.19.2",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: net/http/httputil: ReverseProxy should not forward unparseable query parameters",
      "description": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-29804",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.17.11, 1.18.3",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "ELSA-2022-17957: ol8addon security update (IMPORTANT)",
      "description": "Incorrect conversion of certain invalid paths to valid, absolute paths in Clean in path/filepath before Go 1.17.11 and Go 1.18.3 on Windows allows potential directory traversal attack.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-30580",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.17.11, 1.18.3",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: os/exec: Code injection in Cmd.Start",
      "description": "Code injection in Cmd.Start in os/exec before Go 1.17.11 and Go 1.18.3 allows execution of any binaries in the working directory named either \"..com\" or \"..exe\" by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-30630",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.17.12, 1.18.4",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: io/fs: stack exhaustion in Glob",
      "description": "Uncontrolled recursion in Glob in io/fs before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path which contains a large number of path separators.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-30631",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.17.12, 1.18.4",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: compress/gzip: stack exhaustion in Reader.Read",
      "description": "Uncontrolled recursion in Reader.Read in compress/gzip before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via an archive containing a large number of concatenated 0-length compressed files.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-30632",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.17.12, 1.18.4",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: path/filepath: stack exhaustion in Glob",
      "description": "Uncontrolled recursion in Glob in path/filepath before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path containing a large number of path separators.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-30633",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.17.12, 1.18.4",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: encoding/xml: stack exhaustion in Unmarshal",
      "description": "Uncontrolled recursion in Unmarshal in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via unmarshalling an XML document into a Go struct which has a nested field that uses the 'any' field tag.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-30634",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.17.11, 1.18.3",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "ELSA-2022-17957: ol8addon security update (IMPORTANT)",
      "description": "Infinite loop in Read in crypto/rand before Go 1.17.11 and Go 1.18.3 on Windows allows attacker to cause an indefinite hang by passing a buffer larger than 1 << 32 - 1 bytes.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-30635",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.17.12, 1.18.4",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: encoding/gob: stack exhaustion in Decoder.Decode",
      "description": "Uncontrolled recursion in Decoder.Decode in encoding/gob before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a message which contains deeply nested structures.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-32189",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.17.13, 1.18.5",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: math/big: decoding big.Float and big.Rat types can panic if the encoded message is too short, potentially allowing a denial of service",
      "description": "A too-short encoded message can cause a panic in Float.GobDecode and Rat GobDecode in math/big in Go before 1.17.13 and 1.18.5, potentially allowing a denial of service.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-41715",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.18.7, 1.19.2",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: regexp/syntax: limit memory used by parsing regexps",
      "description": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-41716",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.18.8, 1.19.3",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "Due to unsanitized NUL values, attackers may be able to maliciously se ...",
      "description": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-41720",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.18.9, 1.19.4",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: os, net/http: avoid escapes from os.DirFS and http.Dir on Windows",
      "description": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-41722",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.19.6, 1.20.1",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: path/filepath: path-filepath filepath.Clean path traversal",
      "description": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-41723",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.19.6, 1.20.1",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang.org/x/net/http2: avoid quadratic complexity in HPACK decoding",
      "description": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-41724",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.19.6, 1.20.1",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: crypto/tls: large handshake records may cause panics",
      "description": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth >= RequestClientCert).",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2022-41725",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.19.6, 1.20.1",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: net/http, mime/multipart: denial of service from excessive resource consumption",
      "description": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary files. Callers can limit the size of form data with http.MaxBytesReader.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2023-24534",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.19.8, 1.20.3",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: net/http, net/textproto: denial of service from excessive memory allocation",
      "description": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2023-24536",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.19.8, 1.20.3",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: net/http, net/textproto, mime/multipart: denial of service from excessive resource consumption",
      "description": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2023-24537",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.19.8, 1.20.3",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: go/parser: Infinite loop in parsing",
      "description": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2023-24539",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.19.9, 1.20.4",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: html/template: improper sanitization of CSS values",
      "description": "Angle brackets (<>) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2023-29400",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.19.9, 1.20.4",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: html/template: improper handling of empty HTML attributes",
      "description": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2023-29403",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.19.10, 1.20.5",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: runtime: unexpected behavior of setuid/setgid binaries",
      "description": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2023-39325",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.20.10, 1.21.3",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: net/http, x/net/http2: rapid stream resets can cause excessive work (CVE-2023-44487)",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2023-45283",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.20.11, 1.21.4, 1.20.12, 1.21.5",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "The filepath package does not recognize paths with a \\??\\ prefix as sp ...",
      "description": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2023-45287",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.20.0",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: crypto/tls: Timing Side Channel attack in RSA based TLS key exchanges.",
      "description": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2023-45288",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.21.9, 1.22.2",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "golang: net/http, x/net/http2: unlimited number of CONTINUATION frames causes DoS",
      "description": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2024-34156",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.22.7, 1.23.1",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "encoding/gob: golang: Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2025-47907",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.23.12, 1.24.6",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "database/sql: Postgres Scan Race Condition",
      "description": "Cancelling a query (e.g. by cancelling the context passed to one of the query methods) during a call to the Scan method of the returned Rows can result in unexpected results if other queries are being made in parallel. This can result in a race condition that may overwrite the expected results with those of another query, causing the call to Scan to return either unexpected results from the other query or an error.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2025-47912",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.24.8, 1.25.2",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "The Parse function permits values other than IPv6 addresses to be incl ...",
      "description": "The Parse function permits values other than IPv6 addresses to be included in square brackets within the host component of a URL. RFC 3986 permits IPv6 addresses to be included within the host component, enclosed within square brackets. For example: \"http://[::1]/\". IPv4 addresses and hostnames must not appear within square brackets. Parse did not enforce this requirement.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2025-58183",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.24.8, 1.25.2",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "tar.Reader does not set a maximum size on the number of sparse region  ...",
      "description": "tar.Reader does not set a maximum size on the number of sparse region data blocks in GNU tar pax 1.0 sparse files. A maliciously-crafted archive containing a large number of sparse regions can cause a Reader to read an unbounded amount of data from the archive into memory. When reading from a compressed source, a small compressed input can result in large allocations.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2025-58185",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.24.8, 1.25.2",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "Parsing a maliciously crafted DER payload could allocate large amounts ...",
      "description": "Parsing a maliciously crafted DER payload could allocate large amounts of memory, causing memory exhaustion.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2025-58186",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.24.8, 1.25.2",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "Despite HTTP headers having a default limit of 1MB, the number of cook ...",
      "description": "Despite HTTP headers having a default limit of 1MB, the number of cookies that can be parsed does not have a limit. By sending a lot of very small cookies such as \"a=;\", an attacker can make an HTTP server allocate a large amount of structs, causing large memory consumption.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2025-58187",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.24.9, 1.25.3",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "Due to the design of the name constraint checking algorithm, the proce ...",
      "description": "Due to the design of the name constraint checking algorithm, the processing time of some inputs scals non-linearly with respect to the size of the certificate. This affects programs which validate arbitrary certificate chains.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2025-58188",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.24.8, 1.25.2",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "Validating certificate chains which contain DSA public keys can cause  ...",
      "description": "Validating certificate chains which contain DSA public keys can cause programs to panic, due to a interface cast that assumes they implement the Equal method. This affects programs which validate arbitrary certificate chains.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2025-58189",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.24.8, 1.25.2",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "When Conn.Handshake fails during ALPN negotiation the error contains a ...",
      "description": "When Conn.Handshake fails during ALPN negotiation the error contains attacker controlled information (the ALPN protocols sent by the client) which is not escaped.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2025-61723",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.24.8, 1.25.2",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "The processing time for parsing some invalid inputs scales non-linearl ...",
      "description": "The processing time for parsing some invalid inputs scales non-linearly with respect to the size of the input. This affects programs which parse untrusted PEM inputs.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2025-61724",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.24.8, 1.25.2",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "The Reader.ReadResponse function constructs a response string through  ...",
      "description": "The Reader.ReadResponse function constructs a response string through repeated string concatenation of lines. When the number of lines in a response is large, this can cause excessive CPU consumption.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2025-61725",
      "package_name": "stdlib",
      "installed_version": "v1.14.1",
      "fixed_version": "1.24.8, 1.25.2",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "trivy",
      "title": "The ParseAddress function constructeds domain-literal address componen ...",
      "description": "The ParseAddress function constructeds domain-literal address components through repeated string concatenation. When parsing large domain-literal components, this can cause excessive CPU consumption.",
      "detected_by": [
        "trivy"
      ]
    },
    {
      "cve_id": "CVE-2023-0286",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-0286",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-2650",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL have a\n100KiB limit on the peer's certificate chain.  Additionally, this only\nimpacts clients, or servers that have explicitly enabled client\nauthentication.\n\nIn OpenSSL 1.1.1 and 1.0.2, this only affects displaying diverse objects,\nsuch as X.509 certificates.  This is assumed to not happen in such a way\nthat it would cause a Denial of Service, so these versions are considered\nnot affected by this issue in such a way that it would be cause for concern,\nand the severity is therefore considered low.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-2650",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL have a\n100KiB limit on the peer's certificate chain.  Additionally, this only\nimpacts clients, or servers that have explicitly enabled client\nauthentication.\n\nIn OpenSSL 1.1.1 and 1.0.2, this only affects displaying diverse objects,\nsuch as X.509 certificates.  This is assumed to not happen in such a way\nthat it would cause a Denial of Service, so these versions are considered\nnot affected by this issue in such a way that it would be cause for concern,\nand the severity is therefore considered low.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-1292",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-1292",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-2068",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-2068",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-3449",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1k-r0",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-3449",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1k-r0",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-5535",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "CRITICAL",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Calling the OpenSSL API function SSL_select_next_proto with an\nempty supported client protocols buffer may cause a crash or memory contents to\nbe sent to the peer.\n\nImpact summary: A buffer overread can have a range of potential consequences\nsuch as unexpected application beahviour or a crash. In particular this issue\ncould result in up to 255 bytes of arbitrary private data from memory being sent\nto the peer leading to a loss of confidentiality. However, only applications\nthat directly call the SSL_select_next_proto function with a 0 length list of\nsupported client protocols are affected by this issue. This would normally never\nbe a valid scenario and is typically not under attacker control but may occur by\naccident in the case of a configuration or programming error in the calling\napplication.\n\nThe OpenSSL API function SSL_select_next_proto is typically used by TLS\napplications that support ALPN (Application Layer Protocol Negotiation) or NPN\n(Next Protocol Negotiation). NPN is older, was never standardised and\nis deprecated in favour of ALPN. We believe that ALPN is significantly more\nwidely deployed than NPN. The SSL_select_next_proto function accepts a list of\nprotocols from the server and a list of protocols from the client and returns\nthe first protocol that appears in the server list that also appears in the\nclient list. In the case of no overlap between the two lists it returns the\nfirst item in the client list. In either case it will signal whether an overlap\nbetween the two lists was found. In the case where SSL_select_next_proto is\ncalled with a zero length client list it fails to notice this condition and\nreturns the memory immediately following the client list pointer (and reports\nthat there was no overlap in the lists).\n\nThis function is typically called from a server side application callback for\nALPN or a client side application callback for NPN. In the case of ALPN the list\nof protocols supplied by the client is guaranteed by libssl to never be zero in\nlength. The list of server protocols comes from the application and should never\nnormally be expected to be of zero length. In this case if the\nSSL_select_next_proto function has been called as expected (with the list\nsupplied by the client passed in the client/client_len parameters), then the\napplication will not be vulnerable to this issue. If the application has\naccidentally been configured with a zero length server list, and has\naccidentally passed that zero length server list in the client/client_len\nparameters, and has additionally failed to correctly handle a \"no overlap\"\nresponse (which would normally result in a handshake failure in ALPN) then it\nwill be vulnerable to this problem.\n\nIn the case of NPN, the protocol permits the client to opportunistically select\na protocol when there is no overlap. OpenSSL returns the first client protocol\nin the no overlap case in support of this. The list of client protocols comes\nfrom the application and should never normally be expected to be of zero length.\nHowever if the SSL_select_next_proto function is accidentally called with a\nclient_len of 0 then an invalid memory pointer will be returned instead. If the\napplication uses this output as the opportunistic protocol then the loss of\nconfidentiality will occur.\n\nThis issue has been assessed as Low severity because applications are most\nlikely to be vulnerable if they are using NPN instead of ALPN - but NPN is not\nwidely used. It also requires an application configuration or programming error.\nFinally, this issue would not typically be under attacker control making active\nexploitation unlikely.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.\n\nDue to the low severity of this issue we are not issuing new releases of\nOpenSSL at this time. The fix will be included in the next releases when they\nbecome available.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-5535",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "CRITICAL",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Calling the OpenSSL API function SSL_select_next_proto with an\nempty supported client protocols buffer may cause a crash or memory contents to\nbe sent to the peer.\n\nImpact summary: A buffer overread can have a range of potential consequences\nsuch as unexpected application beahviour or a crash. In particular this issue\ncould result in up to 255 bytes of arbitrary private data from memory being sent\nto the peer leading to a loss of confidentiality. However, only applications\nthat directly call the SSL_select_next_proto function with a 0 length list of\nsupported client protocols are affected by this issue. This would normally never\nbe a valid scenario and is typically not under attacker control but may occur by\naccident in the case of a configuration or programming error in the calling\napplication.\n\nThe OpenSSL API function SSL_select_next_proto is typically used by TLS\napplications that support ALPN (Application Layer Protocol Negotiation) or NPN\n(Next Protocol Negotiation). NPN is older, was never standardised and\nis deprecated in favour of ALPN. We believe that ALPN is significantly more\nwidely deployed than NPN. The SSL_select_next_proto function accepts a list of\nprotocols from the server and a list of protocols from the client and returns\nthe first protocol that appears in the server list that also appears in the\nclient list. In the case of no overlap between the two lists it returns the\nfirst item in the client list. In either case it will signal whether an overlap\nbetween the two lists was found. In the case where SSL_select_next_proto is\ncalled with a zero length client list it fails to notice this condition and\nreturns the memory immediately following the client list pointer (and reports\nthat there was no overlap in the lists).\n\nThis function is typically called from a server side application callback for\nALPN or a client side application callback for NPN. In the case of ALPN the list\nof protocols supplied by the client is guaranteed by libssl to never be zero in\nlength. The list of server protocols comes from the application and should never\nnormally be expected to be of zero length. In this case if the\nSSL_select_next_proto function has been called as expected (with the list\nsupplied by the client passed in the client/client_len parameters), then the\napplication will not be vulnerable to this issue. If the application has\naccidentally been configured with a zero length server list, and has\naccidentally passed that zero length server list in the client/client_len\nparameters, and has additionally failed to correctly handle a \"no overlap\"\nresponse (which would normally result in a handshake failure in ALPN) then it\nwill be vulnerable to this problem.\n\nIn the case of NPN, the protocol permits the client to opportunistically select\na protocol when there is no overlap. OpenSSL returns the first client protocol\nin the no overlap case in support of this. The list of client protocols comes\nfrom the application and should never normally be expected to be of zero length.\nHowever if the SSL_select_next_proto function is accidentally called with a\nclient_len of 0 then an invalid memory pointer will be returned instead. If the\napplication uses this output as the opportunistic protocol then the loss of\nconfidentiality will occur.\n\nThis issue has been assessed as Low severity because applications are most\nlikely to be vulnerable if they are using NPN instead of ALPN - but NPN is not\nwidely used. It also requires an application configuration or programming error.\nFinally, this issue would not typically be under attacker control making active\nexploitation unlikely.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.\n\nDue to the low severity of this issue we are not issuing new releases of\nOpenSSL at this time. The fix will be included in the next releases when they\nbecome available.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-0778",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-0778",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-28391",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "BusyBox through 1.35.0 allows remote attackers to execute arbitrary code if netstat is used to print a DNS PTR record's value to a VT compatible terminal. Alternatively, the attacker could choose to change the terminal's colors.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-28391",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "BusyBox through 1.35.0 allows remote attackers to execute arbitrary code if netstat is used to print a DNS PTR record's value to a VT compatible terminal. Alternatively, the attacker could choose to change the terminal's colors.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-2511",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-2511",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-0464",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-0464",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-4807",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications on the\nWindows 64 platform when running on newer X86_64 processors supporting the\nAVX512-IFMA instructions.\n\nImpact summary: If in an application that uses the OpenSSL library an attacker\ncan influence whether the POLY1305 MAC algorithm is used, the application\nstate might be corrupted with various application dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL does\nnot save the contents of non-volatile XMM registers on Windows 64 platform\nwhen calculating the MAC of data larger than 64 bytes. Before returning to\nthe caller all the XMM registers are set to zero rather than restoring their\nprevious content. The vulnerable code is used only on newer x86_64 processors\nsupporting the AVX512-IFMA instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However given the contents of the registers are just zeroized so\nthe attacker cannot put arbitrary values inside, the most likely consequence,\nif any, would be an incorrect result of some application dependent\ncalculations or a crash leading to a denial of service.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3 and a malicious client can influence whether this AEAD\ncipher is used by the server. This implies that server applications using\nOpenSSL can be potentially impacted. However we are currently not aware of\nany concrete application that would be affected by this issue therefore we\nconsider this a Low severity security issue.\n\nAs a workaround the AVX512-IFMA instructions support can be disabled at\nruntime by setting the environment variable OPENSSL_ia32cap:\n\n   OPENSSL_ia32cap=:~0x200000\n\nThe FIPS provider is not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-4807",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications on the\nWindows 64 platform when running on newer X86_64 processors supporting the\nAVX512-IFMA instructions.\n\nImpact summary: If in an application that uses the OpenSSL library an attacker\ncan influence whether the POLY1305 MAC algorithm is used, the application\nstate might be corrupted with various application dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL does\nnot save the contents of non-volatile XMM registers on Windows 64 platform\nwhen calculating the MAC of data larger than 64 bytes. Before returning to\nthe caller all the XMM registers are set to zero rather than restoring their\nprevious content. The vulnerable code is used only on newer x86_64 processors\nsupporting the AVX512-IFMA instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However given the contents of the registers are just zeroized so\nthe attacker cannot put arbitrary values inside, the most likely consequence,\nif any, would be an incorrect result of some application dependent\ncalculations or a crash leading to a denial of service.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3 and a malicious client can influence whether this AEAD\ncipher is used by the server. This implies that server applications using\nOpenSSL can be potentially impacted. However we are currently not aware of\nany concrete application that would be affected by this issue therefore we\nconsider this a Low severity security issue.\n\nAs a workaround the AVX512-IFMA instructions support can be disabled at\nruntime by setting the environment variable OPENSSL_ia32cap:\n\n   OPENSSL_ia32cap=:~0x200000\n\nThe FIPS provider is not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-3446",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-3446",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-45853",
      "package_name": "zlib",
      "installed_version": "1.2.11-r3",
      "fixed_version": "No fix available",
      "severity": "CRITICAL",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "MiniZip in zlib through 1.3 has an integer overflow and resultant heap-based buffer overflow in zipOpenNewFileInZip4_64 via a long filename, comment, or extra field. NOTE: MiniZip is not a supported part of the zlib product. NOTE: pyminizip through 0.2.6 is also vulnerable because it bundles an affected zlib version, and exposes the applicable MiniZip code through its compress API.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-48174",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "No fix available",
      "severity": "CRITICAL",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-48174",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "No fix available",
      "severity": "CRITICAL",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-23841",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1j-r0",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-23841",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1j-r0",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-0466",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-0466",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-9143",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Use of the low-level GF(2^m) elliptic curve APIs with untrusted\nexplicit values for the field polynomial can lead to out-of-bounds memory reads\nor writes.\n\nImpact summary: Out of bound memory writes can lead to an application crash or\neven a possibility of a remote code execution, however, in all the protocols\ninvolving Elliptic Curve Cryptography that we're aware of, either only \"named\ncurves\" are supported, or, if explicit curve parameters are supported, they\nspecify an X9.62 encoding of binary (GF(2^m)) curves that can't represent\nproblematic input values. Thus the likelihood of existence of a vulnerable\napplication is low.\n\nIn particular, the X9.62 encoding is used for ECC keys in X.509 certificates,\nso problematic inputs cannot occur in the context of processing X.509\ncertificates.  Any problematic use-cases would have to be using an \"exotic\"\ncurve encoding.\n\nThe affected APIs include: EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(),\nand various supporting BN_GF2m_*() functions.\n\nApplications working with \"exotic\" explicit binary (GF(2^m)) curve parameters,\nthat make it possible to represent invalid field polynomials with a zero\nconstant term, via the above or similar APIs, may terminate abruptly as a\nresult of reading or writing outside of array bounds.  Remote code execution\ncannot easily be ruled out.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-9143",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Use of the low-level GF(2^m) elliptic curve APIs with untrusted\nexplicit values for the field polynomial can lead to out-of-bounds memory reads\nor writes.\n\nImpact summary: Out of bound memory writes can lead to an application crash or\neven a possibility of a remote code execution, however, in all the protocols\ninvolving Elliptic Curve Cryptography that we're aware of, either only \"named\ncurves\" are supported, or, if explicit curve parameters are supported, they\nspecify an X9.62 encoding of binary (GF(2^m)) curves that can't represent\nproblematic input values. Thus the likelihood of existence of a vulnerable\napplication is low.\n\nIn particular, the X9.62 encoding is used for ECC keys in X.509 certificates,\nso problematic inputs cannot occur in the context of processing X.509\ncertificates.  Any problematic use-cases would have to be using an \"exotic\"\ncurve encoding.\n\nThe affected APIs include: EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(),\nand various supporting BN_GF2m_*() functions.\n\nApplications working with \"exotic\" explicit binary (GF(2^m)) curve parameters,\nthat make it possible to represent invalid field polynomials with a zero\nconstant term, via the above or similar APIs, may terminate abruptly as a\nresult of reading or writing outside of array bounds.  Remote code execution\ncannot easily be ruled out.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-0215",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-0215",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-2097",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-2097",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-0465",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-0465",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2020-1971",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1i-r0",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2020-1971",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1i-r0",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-3817",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-3817",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-4160",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-4160",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-4304",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-4304",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-0727",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-0727",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-4741",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Calling the OpenSSL API function SSL_free_buffers may cause\nmemory to be accessed that was previously freed in some situations\n\nImpact summary: A use after free can have a range of potential consequences such\nas the corruption of valid data, crashes or execution of arbitrary code.\nHowever, only applications that directly call the SSL_free_buffers function are\naffected by this issue. Applications that do not call this function are not\nvulnerable. Our investigations indicate that this function is rarely used by\napplications.\n\nThe SSL_free_buffers function is used to free the internal OpenSSL buffer used\nwhen processing an incoming record from the network. The call is only expected\nto succeed if the buffer is not currently in use. However, two scenarios have\nbeen identified where the buffer is freed even when still in use.\n\nThe first scenario occurs where a record header has been received from the\nnetwork and processed by OpenSSL, but the full record body has not yet arrived.\nIn this case calling SSL_free_buffers will succeed even though a record has only\nbeen partially processed and the buffer is still in use.\n\nThe second scenario occurs where a full record containing application data has\nbeen received and processed by OpenSSL but the application has only read part of\nthis data. Again a call to SSL_free_buffers will succeed even though the buffer\nis still in use.\n\nWhile these scenarios could occur accidentally during normal operation a\nmalicious attacker could attempt to engineer a stituation where this occurs.\nWe are not aware of this issue being actively exploited.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-4741",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Calling the OpenSSL API function SSL_free_buffers may cause\nmemory to be accessed that was previously freed in some situations\n\nImpact summary: A use after free can have a range of potential consequences such\nas the corruption of valid data, crashes or execution of arbitrary code.\nHowever, only applications that directly call the SSL_free_buffers function are\naffected by this issue. Applications that do not call this function are not\nvulnerable. Our investigations indicate that this function is rarely used by\napplications.\n\nThe SSL_free_buffers function is used to free the internal OpenSSL buffer used\nwhen processing an incoming record from the network. The call is only expected\nto succeed if the buffer is not currently in use. However, two scenarios have\nbeen identified where the buffer is freed even when still in use.\n\nThe first scenario occurs where a record header has been received from the\nnetwork and processed by OpenSSL, but the full record body has not yet arrived.\nIn this case calling SSL_free_buffers will succeed even though a record has only\nbeen partially processed and the buffer is still in use.\n\nThe second scenario occurs where a full record containing application data has\nbeen received and processed by OpenSSL but the application has only read part of\nthis data. Again a call to SSL_free_buffers will succeed even though the buffer\nis still in use.\n\nWhile these scenarios could occur accidentally during normal operation a\nmalicious attacker could attempt to engineer a stituation where this occurs.\nWe are not aware of this issue being actively exploited.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-23839",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1j-r0",
      "severity": "LOW",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-23839",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "1.1.1j-r0",
      "severity": "LOW",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-4450",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2022-4450",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2018-25032",
      "package_name": "zlib",
      "installed_version": "1.2.11-r3",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "zlib before 1.2.12 allows memory corruption when deflating (i.e., when compressing) if the input has many distant matches.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-5678",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2023-5678",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-13176",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: A timing side-channel which could potentially allow recovering\nthe private key exists in the ECDSA signature computation.\n\nImpact summary: A timing side-channel in ECDSA signature computations\ncould allow recovering the private key by an attacker. However, measuring\nthe timing would require either local access to the signing application or\na very fast network connection with low latency.\n\nThere is a timing signal of around 300 nanoseconds when the top word of\nthe inverted ECDSA nonce value is zero. This can happen with significant\nprobability only for some of the supported elliptic curves. In particular\nthe NIST P-521 curve is affected. To be able to measure this leak, the attacker\nprocess must either be located in the same physical computer or must\nhave a very fast network connection with low latency. For that reason\nthe severity of this vulnerability is Low.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-13176",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: A timing side-channel which could potentially allow recovering\nthe private key exists in the ECDSA signature computation.\n\nImpact summary: A timing side-channel in ECDSA signature computations\ncould allow recovering the private key by an attacker. However, measuring\nthe timing would require either local access to the signing application or\na very fast network connection with low latency.\n\nThere is a timing signal of around 300 nanoseconds when the top word of\nthe inverted ECDSA nonce value is zero. This can happen with significant\nprobability only for some of the supported elliptic curves. In particular\nthe NIST P-521 curve is affected. To be able to measure this leak, the attacker\nprocess must either be located in the same physical computer or must\nhave a very fast network connection with low latency. For that reason\nthe severity of this vulnerability is Low.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are affected by this issue.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42374",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2021-42374",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "1.31.1-r11",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2020-28928",
      "package_name": "musl",
      "installed_version": "1.1.24-r2",
      "fixed_version": "1.1.24-r3",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2020-28928",
      "package_name": "musl-utils",
      "installed_version": "1.1.24-r2",
      "fixed_version": "1.1.24-r3",
      "severity": "MEDIUM",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2025-9230",
      "package_name": "libcrypto1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: An application trying to decrypt CMS messages encrypted using\npassword based encryption can trigger an out-of-bounds read and write.\n\nImpact summary: This out-of-bounds read may trigger a crash which leads to\nDenial of Service for an application. The out-of-bounds write can cause\na memory corruption which can have various consequences including\na Denial of Service or Execution of attacker-supplied code.\n\nAlthough the consequences of a successful exploit of this vulnerability\ncould be severe, the probability that the attacker would be able to\nperform it is low. Besides, password based (PWRI) encryption support in CMS\nmessages is very rarely used. For that reason the issue was assessed as\nModerate severity according to our Security Policy.\n\nThe FIPS modules in 3.5, 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this\nissue, as the CMS implementation is outside the OpenSSL FIPS module\nboundary.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2025-9230",
      "package_name": "libssl1.1",
      "installed_version": "1.1.1g-r0",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "Issue summary: An application trying to decrypt CMS messages encrypted using\npassword based encryption can trigger an out-of-bounds read and write.\n\nImpact summary: This out-of-bounds read may trigger a crash which leads to\nDenial of Service for an application. The out-of-bounds write can cause\na memory corruption which can have various consequences including\na Denial of Service or Execution of attacker-supplied code.\n\nAlthough the consequences of a successful exploit of this vulnerability\ncould be severe, the probability that the attacker would be able to\nperform it is low. Besides, password based (PWRI) encryption support in CMS\nmessages is very rarely used. For that reason the issue was assessed as\nModerate severity according to our Security Policy.\n\nThe FIPS modules in 3.5, 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this\nissue, as the CMS implementation is outside the OpenSSL FIPS module\nboundary.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2025-26519",
      "package_name": "musl",
      "installed_version": "1.1.24-r2",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "musl libc 0.9.13 through 1.2.5 before 1.2.6 has an out-of-bounds write vulnerability when an attacker can trigger iconv conversion of untrusted EUC-KR text to UTF-8.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2025-26519",
      "package_name": "musl-utils",
      "installed_version": "1.1.24-r2",
      "fixed_version": "No fix available",
      "severity": "HIGH",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "musl libc 0.9.13 through 1.2.5 before 1.2.6 has an out-of-bounds write vulnerability when an attacker can trigger iconv conversion of untrusted EUC-KR text to UTF-8.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2025-46394",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "No fix available",
      "severity": "LOW",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "In tar in BusyBox through 1.37.0, a TAR archive can have filenames hidden from a listing through the use of terminal escape sequences.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2025-46394",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "No fix available",
      "severity": "LOW",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "In tar in BusyBox through 1.37.0, a TAR archive can have filenames hidden from a listing through the use of terminal escape sequences.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-58251",
      "package_name": "busybox",
      "installed_version": "1.31.1-r9",
      "fixed_version": "No fix available",
      "severity": "LOW",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "In netstat in BusyBox through 1.37.0, local users can launch of network application with an argv[0] containing an ANSI terminal escape sequence, leading to a denial of service (terminal locked up) when netstat is used by a victim.",
      "detected_by": [
        "grype"
      ]
    },
    {
      "cve_id": "CVE-2024-58251",
      "package_name": "ssl_client",
      "installed_version": "1.31.1-r9",
      "fixed_version": "No fix available",
      "severity": "LOW",
      "image": "hyperledger/fabric-peer:2.1",
      "scanner": "grype",
      "title": "",
      "description": "In netstat in BusyBox through 1.37.0, local users can launch of network application with an argv[0] containing an ANSI terminal escape sequence, leading to a denial of service (terminal locked up) when netstat is used by a victim.",
      "detected_by": [
        "grype"
      ]
    }
  ]
}